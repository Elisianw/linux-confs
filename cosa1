# Burn Arch img into a usb drive with Rufus or use Ventoy.
# Disable secureboot and boot usb drive from bios.

# Change font size, other sizes 130b/128b/126b/124b/etc.
setfont ter-132b

# List disks.
lsblk

# Select disk and create partitions.
cfdisk /dev/'sda'
# Make a 512MB partition for the boot, and make it efi type.
# Make a partition for the the system.

# Format partitions.
mkfs.ext4 /dev/'sda1'
mkfs.fat -F 32 /dev/'sda1'
mkfs.ext4 /dev/'sda2'

# Setup encryption.
cryptsetup luksFormat /dev/'sda1'
# Input a password.

# Setup lvm
cryptsetup open /dev/'sda2' cryptlv
pvcreate /dev/mapper/cryptlvm
vgcreate vg /dev/mapper/cryptlvm
lvcreate --size 100G vg --name root
# Sets the size of root partition, the rest will be used for home.
lvcreate -l +100%FREE vg --name home
lvreduce --size -256M vg/home

# Format logical volumes.
mkfs.ext4 /dev/vg/root
mkfs.ext4 /dev/vg/home

# Mount the partitions.
mount /dev/vg/root /mnt
mount --mkdir /dev/'sda1' /mnt/boot/efi
mount --mkdir /dev/vg/home /mnt/home

# Connect to the internet if not connected already.

# Installing essential packages.
pacstrap -K /mnt base-devel (amd-ucode/intel-ucode) linux-firmware linux-zen linux-zen-headers lvm2 man-db vim nano git networkmanager terminus-font 

# Generate fstab
genfstab -U /mnt >> /mnt/etc/fstab

# Chroot into the system
arch-chroot /mnt
UTF-8
#---
locale-gen
# Edit bl and add:
LANG=en_US.UTF-8

# Set terminal conf.
# Edit /etc/vconsole.conf add:
KEYMAP=us
FONT=ter-132b
#---

# Set hostname
# Edit /etc/hostname, add a name.
hostname
#---

# Setup root password
passwd

# Setup user
useradd -m -G wheel user_name
passwd user_name, uncomment:

# Remove need for sudo password
# Edit /etc/sudoers
%wheel      ALL=(ALL:ALL) NOPASSWD: ALL
#---

# Enable multilib support
# Edit /etc/pacman.conf, uncomment:
[multilib]
Include = /etc/pacman.d/mirrorlist
#---
pacman -Sy

# Enable network service
systemctl enable NetworkManager

# Towards secure boot.
# Setup UKI.
# Edit /etc/mkinitcpio.d/linux-zen.preset, and leave it like this (the names doesn't match):
#ALL_config="/etc/mkinitcpio.conf"
ALL_kver="/boot/vmlinuz-linux"

PRESETS=('default''fallback')

#default_config="/etc/mkinitcpio.conf"
#default_image="/boot/initramfs-linux.img"
default_uki="/boot/efi//EFI/Linux/arch-linux.efi"
#default_options="--splash=/usr/share/systemd/bootctl/splash-arch.bmp"

#fallback_config="/etc/mkinitcpio.conf"
#fallback_image="/boot/initramfs-linux-fallback.img"
fallback_uki="esp/EFI/Linux/arch-linux-fallback.efi"
fallback_options="-S autodetect"
#---

# Make UKI dir.
mkdir -p /boot/efi/EFI/Linux

# Add kernel parameters
mkdir /etc/cmdline.d/
touch /etc/cmdline.d/params.conf
exit
lsblk -f >> /mnt/etc/cmdline.d/params.conf
arch-chroot /mnt
# Edit /etc/cmdline.d/params.conf and add:
# Make so that UUID is the sequence of numbers that is next to /dev/'sda2', then remove the rest.
rd.luks.options=timeout=-1,discard,password-echo=no,rootflags=x-systemd.device-timeout=-1
rd.luks.name=UUID=cryptlvm root=/dev/vg/root rw quiet loglevel=3
# For proprietary nvidia drivers add:
rd.driver.blacklist=nouveau nvidia_drm.modeset=1 nvidia_drm.fbdev=1 nvidia.NVreg_PreserveVideoMemoryAllocations=1
# For open nvidia drivers add:
nouveau.config=NvGspRm=1 nvidia.NVreg_PreserveVideoMemoryAllocations=1

# Modify mkinitcpio
# Edit /etc/mkinitcpio.conf and change the hooks and modules like this:
MODULES=()
BINARIES=()
FILES=()
HOOKS=(base systemd autodetect modconf kms keyboard sd-vconsole sd-encrypt block lvm2 filesystems fsck)
# For proprietary nvidia drivers change modules to:
MODULES=(nvidia nvidia_modeset nvidia_uvm nvidia_drm)
# For open nvidia drivers change modules to:
MODULES=(nouveau)
# Also create /etc/modprobe.d/nvidia.confs and add:
options nvidia_drm modeset=1 fbdev=1
#---

# Remove previous initramfs
rm -rf /boot/initramfs*

# Update boot
mkinitcpio -P linux-zen
bootctl install
# It will propt errors, ignore.

# Reboot and boot into newly installed system.

mkdir -p /etc/systemd/system/getty@tty1.service.d/
touch /etc/systemd/system/getty@tty1.service.d/override.conf
# Edit /etc/systemd/system/getty@tty1.service.d/override.conf, and add:
[Service]
ExecStart=
ExecStart=-/usr/bin/agetty --autologin user_name --noclear %I $TERM
#---
# Alternatively can be done with systemctl edit getty@tty1

# Yay
git clone https://aur.archlinux.org/yay.git && cd yay && makepkg -si

yay -Y --gendb
yay -Y --devel --save
yay -Syu

# Install things
# Nvidia drivers
# Proprietary Nivida drivers.
sudo pacman -S libvdpau libxnvctrl libva-mesa-driver mesa-vdpau opencl-clover-mesa libva-nvidia-driver
yay -S nvidia-beta-dkms nvidia-utils-beta lib32-nvidia-utils-beta nvidia-settings-beta opencl-nvidia-beta lib32-opencl-nvidia-beta egl-wayland-git
# Open Nvidia drivers.
sudo pacman -S mesa lib32-mesa libdrm lib32-libdrm xf86-video-nouveau libva-nvidia-driver libvdpau libxnvctrl libva-mesa-driver mesa-vdpau opencl-clover-mesa
yay -S vulkan-nouveau-git lib32-vulkan-nouveau-git

# Wayland.
pacman -S xorg
yay -S xorg-xwayland-git wayland-git wayland-protocols-git wlroots-git qt5-wayland qt6-wayland

# Hyprland.
yay -S hyprland-git hyprpaper-git hypridle-git hyprlock-git xdg-desktop-portal-hyprland-git

# Sway.
yay -S sway-git swaylock-git swayidle-git swaybg-git
# Or swayfx-git

pacman -S #-->
pipewire lib32-pipewire pipewire-audio wireplumber pipewire-jack lib32-pipewire-jack pipewire-pulse pipewire-alsa
playerctl pavucontrol bluez bluez-utils blueman network-manager-applet qt5ct kavuntum lxappearance
python rust go ruby maven gradle
zsh alacritty yazi neovim htop xdg-desktop-portal-wlr
xdg-desktop-portal-kde dunst cliphist wofi grim kwallet dolphin okular
libreoffice-fresh vlc spotify-launcher obsidian obs-studio steam reaper
# Don'use disrcord app as it works poorly, instead use discord in a werb browser.

yay -S #-->
qimgv vscodium oh-my-zsh pcloud-drive thorium-browser retroarch-git
jdk8-temurin jdk11-temurin jdk17-temurin jdk21-temurin

# Enable bluetooth
systemctl enable bluetooth

# Setup and load stored configs.
# Establish default jvm.
# Symlink .zsh to /root

# Update boot
mkinitcpio -P

# Secureboot
# Make sure everything up this point is nice.
# Reboot, go to bios and put secure boot in disabled, custom, reset keys and ensure it is in deploy / setup.
# ...

--------------------------------------------------------------------------------------

# Open
mesa lib32-mesa libva-mesa-driver mesa-vdpau

# Nvidia proprietary
nvidia-beta-dkms nvidia-utils-beta lib32-nvidia-utils-beta nvidia-settings-beta opencl-nvidia-beta lib32-opencl-nvidia-beta libva-nvidia-driver

# pakgs
lightdm-slick-greeter light-locker pipewire lib32-pipewire pipewire-audio wireplumber pipewire-jack lib32-pipewire-jack pipewire-pulse pipewire-alsa playerctl pavucontrol bluez bluez-utils blueman network-manager-applet qt5ct kvantum lxappearance dconf-editor python rust go ruby maven gradle zsh wezterm yazi btop xdg-desktop-portal-gtk copyq libreoffice-fresh vlc spotify-launcher obsidian obs-studio steam gamescope prismlauncher reaper thunderbird xfc4-power-manager code nitrogen hsetroot xautolock xsecurelock dolphin ark firewalld

# AUR
discord-canary-electron-bin selectdefaultapplication-fork-git xmousepasteblock qimgv oh-my-zsh-git pcloud-drive thorium-browser retroarch-git jdk8-temurin jdk11-temurin jdk17-temurin jdk21-temurin

# bspwm
bspwm sxhkdrc picom rofi polybar

# lightdm
sudo systemctl enable lightdm
sudo systemctl start lightdm
# /usr/local/bin/lightdm-greeter-monitor
#!/bin/bash

while true; do
  # Check if the slick greeter is running
  if pgrep -x "slick-greeter" > /dev/null; then
    # Wait for 10 minutes (600 seconds)
    sleep 600

    # Check again after 10 minutes
    if pgrep -x "slick-greeter" > /dev/null; then
      # Shut down the system
      shutdown -h now
    fi
  else
    # If the greeter is not running, check again in 10 seconds
    sleep 10
  fi
done
# chmod +x /usr/local/bin/lightdm-greeter-monitor
# /etc/systemd/system/lightdm-greeter-monitor.service
[Unit]
Description=Monitor LightDM Greeter and shutdown if it stays open for 10 minutes
After=lightdm.service

[Service]
Type=simple
ExecStart=/path/to/your/lightdm-greeter-monitor.sh
Restart=always

[Install]
WantedBy=multi-user.target
# Restart
sudo systemctl daemon-reload
sudo systemctl enable lightdm-greeter-monitor
sudo systemctl start lightdm-greeter-monitor



# Default apps
xdg-mime default org.kde.dolphin.desktop inode/directory application/x-gnome-saved-search

xdg-mime default org.wezfurlong.wezterm.desktop x-scheme-handler/terminal

xdg-mime default thunderbird.desktop x-scheme-handler/mailto

xdg-mime default vlc.desktop video/
xdg-mime default vlc.desktop audio/
xdg-mime default qimgv.desktop image/

xdg-mime default thorium-browser.desktop x-scheme-handler/http
xdg-mime default thorium-browser.desktop x-scheme-handler/https

xdg-mime default code-oss.desktop text/x-conf


# Open Minecraft ports
sudo systemctl enable firewalld # or just start it this time with:
sudo systemctl start firewalld
sudo firewall-cmd --permanent --add-port=25565/tcp
sudo firewall-cmd --permanent --add-port=25565/udp
sudo firewall-cmd --reload
# To see if worked
sudo firewall-cmd --list-ports

# Cloduflare DNS
## With Network Manager
# Go to 'Advanced Network Configuration' and under IPv4 and IPv6 set to static and 'Automatic, addres only' the dns
1.1.1.1, 1.0.0.1
2606:4700:4700::1111, 2606:4700:4700::1001
# Restart
## With systemd-resolved
# /etc/NetworkManager/NetworkManager.conf
[main]
dns=systemd
# Restart
sudo systemctl restart NetworkManager

nmcli connection show
nmcli connection modify "Connection_Name" ipv4.dns "DNS1,DNS2"

# /etc/resolv.conf
nameserver 1.1.1.1
nameserver 1.0.0.1
nameserver 2606:4700:4700::1111
nameserver 2606:4700:4700::1001
# /etc/systemd/resolved.conf
[Resolve]
DNS=1.1.1.1 1.0.0.1
DNS=2606:4700:4700::1111 2606:4700:4700::1001
# Restart
sudo systemctl enable systemd-resolved

disable vsync for apps

# gamescope for luanching from Steam
vblank_mode=0 gamescope -w 1920 -h 1080 -W 1920 -H 1080 -o 20 -b -- %command%
# Other
vblank_mode=0 gamescope -w 1920 -h 1080 -W 1920 -H 1080 -o 20 -b -- prismlauncher
# Kill gamescope
pkill -SIGTERM gamescope


# Neovim shit
yay -S packer

-------------------------------------------------------------------------------

# Restart and put secure but to setup or deploy mode
sudo -i
sbctl status
sbctl create-keys
sbctl enroll-keys -m
sbctl sign -s -o /usr/lib/systemd/boot/efi/systemd-bootx64.efi.signed /usr/lib/systemd/boot/efi/systemd-bootx64.efi
sbctl verify
mount --mkdir /dev/nvme0n1p1 /boot/efi/win
sbctl verify | sed 's/✗ /sbctl sign -s /e'
sbctl status
# Restart and enable secure boot
sudo systemd-cryptenroll /dev/nvme0n1p7 --wipe-slot=1 --tpm2-device=auto


grub efibootmgr ntfs-3f os-prober

sudo grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB

sudo nvim /etc/default/grub

sudo grub-mkconfig -o /boot/grub/grub.cfg

--------------------------------------

dconf write /org/cinnamon/desktop/background/show-desktop-icons false
dconf write /org/gnome/desktop/background/show-desktop-icons false

dconf write /org/cinnamon/desktop/interface/enable-animations false
gsettings set org.gnome.desktop.interface enable-animations false
gsettings set org.gnome.desktop.wm.preferences action-middle-click-titlebar 'none'



# ZSH
# /etc/zsh/zshenv
eport ZDOTDIR=$HOME/.config/zsh
sudo -i
ln -s /home/eli/.config/zsh ~/.config/zsh

-----------------------------

# /etc/X11/xorg.conf.d/10-monitor.conf
Section "Monitor"
    Identifier "HDMI-0"
    Option "PreferredMode" "1920x1080_74.973"
EndSection

# /etc/default/keyboard
XKBMODEL=""
XKBLAYOUT="us"
XKBVARIANT="altgr-intl"
XKBOPTIONS=""

# /etc/X11/xorg.conf.d/40-libinput.conf
Section "InputClass"
  Identifier "libinput pointer catchall"
  MatchIsPointer "on"
  MatchDevicePath "/dev/input/event*"
  Driver "libinput"
  Option "AccelProfile" "flat"
  Option "ScrollMethod" "button"
  Option "ScrollMethodButton" "1"
  Option "ScrollSpeed" "0.5"
EndSection

# /etc/X11/Xsession.d/99-custom-settings
xinput set-prop 8 "libinput Accel Profile Enabled" 0 1 0
xinput set-prop 8 "libinput Scroll Method Enabled" 0 0 1
# Make executable
chmod +x /etc/X11/Xsession.d/99-custom-settings

# Prompt
 If to make persisten `xinput set-prop 8 "libinput Accel Profile Enabled" 0 1 0` you add to `/etc/X11/xorg.conf.d/40-libinput.conf`:
 ```
 Section "InputClass"
  Identifier "libinput pointer catchall"
  MatchIsPointer "on"
  MatchDevicePath "/dev/input/event*"
  Driver "libinput"
  Option "AccelProfile" "flat"
 EndSection
 ```
Then what do you do to make persistent `xinput set-prop 8 "libinput Scroll Method Enabled" 0 0 1`?

# Answer, to add scrolling and making it x2 faster
Section "InputClass"
  Identifier "libinput pointer catchall"
  MatchIsPointer "on"
  MatchDevicePath "/dev/input/event*"
  Driver "libinput"
  Option "AccelProfile" "flat"
  Option "ScrollMethod" "button"
  Option "ScrollMethodButton" "1"
  Option "ScrollSpeed" "0.5"
EndSection

# No sudo password
# /etc/sudoers.d/00_eli
eli ALL=(ALL) NOPASSWD: ALL



# DOLPHIN

https://bbs.archlinux.org/viewtopic.php?id=293509
https://discuss.kde.org/t/kbuildsycoca6-applications-menu-not-found-in-home-user-config-menus-etc-xdg-menus/17312

# ~/.config/kdeglobals
...
[Colors:View]
BackgroundNormal=#2E2E2E
...

# Swap
resume=UUID=<swap-uuid>
resume=/swapfile

To have the authentication process start up without a keypress when the system exits suspend/hibernate, arrange for the system to send the SIGUSR2 signal to the XSecureLock process.

For example, you can copy the following script to the file /usr/lib/systemd/system-sleep/xsecurelock:

#!/bin/bash
if [[ "$1" = "post" ]] ; then
  pkill -x -USR2 xsecurelock
fi
exit 0

sudo swapoff /dev/zram0
sudo modprobe -r zram
sudo modprobe zram
sudo echo 16777216 > /sys/block/zram0/disksize
sudo mkswap /dev/zram0
sudo swapon /dev/zram0

sudo mkswap -U clear --size 16G --file /swapfile

You may either decrease the value of /sys/power/image_size to make the suspend image as small as possible (for small swap partitions), or increase it to possibly speed up the hibernation process. For systems with a large amount of RAM, smaller values may drastically increase the speed of resuming a hibernating system. systemd#systemd-tmpfiles - temporary files can be used to make this change persistent:

/etc/tmpfiles.d/hibernation_image_size.conf
#    Path                   Mode UID  GID  Age Argument
w    /sys/power/image_size  -    -    -    -   0

      
efibootmgr -c -d /dev/sda -p 1 -L "ArchLinux" -l 'EFI/Linux/archlinux.efi'

boot drive / partition number / file

sudo efibootmgr -c -d /dev/nvme0n1 -p 4 -L "ArchLinux" -l 'EFI/Linux/arch-linux-zen.efi'




Preserve video memory after suspend
By default the NVIDIA Linux drivers save and restore only essential video memory allocations on system suspend and resume. Quoting NVIDIA:

The resulting loss of video memory contents is partially compensated for by the user-space NVIDIA drivers, and by some applications, but can lead to failures such as rendering corruption and application crashes upon exit from power management cycles.
The "still experimental" interface enables saving all video memory (given enough space on disk or RAM).

To save and restore all video memory contents, NVreg_PreserveVideoMemoryAllocations=1 kernel module parameter for the nvidia kernel module needs to be set. While NVIDIA does not set this by default, Arch Linux does for the supported drivers.

You also need to have the services nvidia-suspend.service, nvidia-hibernate.service, and nvidia-resume.service enabled. Arch Linux enables them by default on supported drivers, as per upstream requirements.





# nvidia 

sudo systemctl enable nvidia-suspend.service nvidia-hibernate.service nvidia-resume.service

/etc/cmdline.d/params.conf
options root=UUID= rw resume=UUID= resume_offset= nvidia_drm.modeset=1 nvidia_drm.fbdev=1 quiet loglevel=3

options rd.luks.name=(disk_UUID))=cryptlvm root=/dev/vg/root rw resume=UUID=(swap_uuid / root_uuid_if_swapfile) resume_offset=(filefrag -v /swapfile) nvidia-drm.modeset=1 nvidia-drm.fbdev=1 nvidia.NVreg_RegistryDwords=EnableBrightnessControl=1 quiet loglevel=3

systemctl enable nvidia-suspend.service nvidia-hibernate.service nvidia-resume.service

sudo mkswap -U clear --size 32G --file /swapfile
sudo chmod 600 /swapfile
sudo swapon /swapfile

/swapfile none swap defaults 0 0

/etc/modprobe.d/nvidia.conf
options nvidia_drm modeset=1 fbdev=1
options nvidia NVreg_PreserveVideoMemoryAllocations=1 NVreg_TemporaryFilePath=/var/tmp

# Encrypted drive automount

mkfs.ext4 /dev/drive
cryptsetup luksFormat /dev/drive
cryptsetup open /dev/drive devicename
mkfs.ext4 /dev/mapper/devicename
tune2fs -m 0 /dev/mapper/devicename

dd if=/dev/random bs=32 count=1 of=/root/keys/filename

cryptsetup luksAddKey /dev/drive /root/keys/filename

/etc/fstab
/dev/mapper/devicename      /mountpoint                 ext4    defaults        0 0

/etc/crypttab
devicename  /dev/drive       /root/keys/filename

# Bitlocker
manage-bde -protectors -add C: -keyfile C:\Path\To\Keyfile

# wipe

# Fill all empty space
dd if=/dev/zero of=/path/to/mount/point/fillfile bs=1M

# Fill and wipe
dd if=/dev/urandom of=/wipefile bs=1M count=102400
rm -rf /wipefile
dd if=/dev/zero of=/wipefile bs=1M count=102400
rm -rf /wipefile

# Space
df -h

# Local time
sudo timedatectl set-local-rtc 0

/etc/systemd/sleep.conf
[Sleep]
AllowSuspend=yes
AllowHibernation=yes
#AllowSuspendThenHibernate=yes
AllowHybridSleep=yes

SuspendMode=suspend
SuspendState=mem

HibernateMode=platform shutdown
HibernateState=disk

HybridSleepMode=suspend platform shutdown
HybridSleepState=disk

MemorySleepMode=deep

#HibernateDelaySec=
HibernateOnACPower=yes
#SuspendEstimationSec=60min

/etc/systemd/logind.conf

sudo systemctl enable nvidia-persistenced

# gamescope setcap
# /etc/systemd/system/setcap-gamescope.service
[Unit]
Description=Set capabilities for Gamescope
After=local-fs.target

[Service]
Type=oneshot
ExecStart=/bin/sh -c "setcap 'cap_sys_nice=eip' /usr/bin/gamescope"
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target

# Disable event that prevents suspension
# cat /proc/acpi/wakeup
# echo "GPP0" > /proc/acpi/wakeup
# Servce
# /etc/systemd/system/acpi-wakeup-disable-gpp0.service
[Unit]
Description=Disable GPP0 ACPI wakeup
After=local-fs.target

[Service]
Type=oneshot
ExecStart=/bin/sh -c 'echo "GPP0" > /proc/acpi/wakeup'

[Install]
WantedBy=multi-user.target

# zram
yay -S zram-generator
nvim /etc/systemd/zram-generator.conf

[zram0]
zram-size = 4096
compression-algorithm = zstd

sudo systemctl enable --now systemd-zram-setup@zram0.service
